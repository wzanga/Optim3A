/** Number of acquisition opportunities */
int NacquisitionWindows = ...;
/** Acquisition range */
range AcquisitionWindows = 1..NacquisitionWindows;

/** Index of the acquisition in the list of candidate acquisitions of the problem */
int CandidateAcquisitionIdx[AcquisitionWindows] = ...;
/** Index of the acquisition window in the list of windows associated with the same candidate acquisition */
int AcquisitionWindowIdx[AcquisitionWindows] = ...;

/** Earliest start time associated with each acquisition window */
float EarliestStartTime[AcquisitionWindows] = ...;
/** Latest start time associated with each acquisition window */
float LatestStartTime[AcquisitionWindows] = ...;
/** Acquisition duration associated with each acquisition window */
float Duration[AcquisitionWindows] = ...;

/** Required transition time between each pair of successive acquisitions windows */
float TransitionTimes[AcquisitionWindows][AcquisitionWindows] = ...;

/** File in which the result will be written */
string OutputFile = ...;

/** Boolean variable indicating whether an acquisition window is selected */
dvar int selectAcq[AcquisitionWindows] in 0..1;
/** successorList[a1]=a2 iff window a2  is the successor of window a1 */
dvar int successorList[AcquisitionWindows][AcquisitionWindows] in 0..AcquisitionWindows;
/** Acquisition start time in each acquisition window */
dvar float+ startTime[a in AcquisitionWindows] in EarliestStartTime[a]..LatestStartTime[a];

execute{
	cplex.tilim = 60; // 60 seconds
}

// maximize the number of acquisition windows selected
maximize sum(a in AcquisitionWindows) selectAcq[a];

constraints {
	// An acquisition window is selected if and only if it has a (unique) precedessor and a (unique) successor in the plan
	forall (a in AcquisitionWindows){
		count(successorList, a) == selectAcq[a];
	}

	//Restriction of possible successive selected acquisition windows by using earliest and latest acquisition times
	forall(a1,a2 in AcquisitionWindows : a1 != a2 && EarliestStartTime[a1] + Duration[a1] + TransitionTimes[a1][a2] >= LatestStartTime[a2]){
		successorList[a1]!=a2;
	}

	//Temporal separation constraints between successive acquisition windows (big-M formulation)
	forall(a1,a2 in AcquisitionWindows : a1 != a2 && EarliestStartTime[a1] + Duration[a1] + TransitionTimes[a1][a2] < LatestStartTime[a2]){
		if( successorList[a1]==a2){
			startTime[a1] + Duration[a1] + TransitionTimes[a1][a2]  <= startTime[a2]+LatestStartTime[a1]+Duration[a1]+TransitionTimes[a1][a2]-EarliestStartTime[a2]
		}else{
			startTime[a1] + Duration[a1] + TransitionTimes[a1][a2]  <= startTime[a2]
		}
	}

	//End of constraints
}

execute {
	var ofile = new IloOplOutputFile(OutputFile);
	for(var i=1; i <= NacquisitionWindows; i++) {
		if(selectAcq[i] == 1){
			ofile.writeln(CandidateAcquisitionIdx[i] + " " + AcquisitionWindowIdx[i] + " " + startTime[i] + " " + (startTime[i]+Duration[i]));
		}
	}
}
